syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto"; // Импорт для валидации

package task;

option go_package = "dovgalb.task_manager.v1/task;task_v1";

// Сервис для управления задачами
service Task {
  rpc CreateTask (CreateTaskRequest) returns (TaskResponse);
  rpc ReadTask (ReadTaskRequest) returns (TaskResponse);
  rpc UpdateTask (UpdateTaskRequest) returns (TaskResponse);
  rpc DeleteTask (DeleteTaskRequest) returns (google.protobuf.Empty);
}

// Запрос на создание задачи
message CreateTaskRequest {
  string title = 1 [(validate.rules).string = {min_len: 1, max_len: 100}]; // Заголовок от 1 до 100 символов
  string description = 2 [(validate.rules).string = {max_len: 1000}]; // Описание до 1000 символов
  bool is_completed = 3;
  int64 task_category_id = 4 [(validate.rules).int64 = {gt: 0}]; // ID категории должен быть положительным
}

// Запрос на чтение задачи
message ReadTaskRequest {
  int64 task_id = 1 [(validate.rules).int64 = {gt: 0}]; // ID задачи должен быть положительным
}

// Запрос на обновление задачи
message UpdateTaskRequest {
  int64 task_id = 1 [(validate.rules).int64 = {gt: 0}]; // ID задачи должен быть положительным
  string title = 2 [(validate.rules).string = {min_len: 1, max_len: 100}];
  string description = 3 [(validate.rules).string = {max_len: 1000}];
  bool is_completed = 4;
  int64 task_category_id = 5 [(validate.rules).int64 = {gt: 0}];
  google.protobuf.FieldMask update_mask = 6;
}

// Запрос на удаление задачи
message DeleteTaskRequest {
  int64 task_id = 1 [(validate.rules).int64 = {gt: 0}]; // ID задачи должен быть положительным
}

// Ответ с данными задачи
message TaskResponse {
  int64 task_id = 1;
  string title = 2;
  string description = 3;
  bool is_completed = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  int64 task_category_id = 7;
}